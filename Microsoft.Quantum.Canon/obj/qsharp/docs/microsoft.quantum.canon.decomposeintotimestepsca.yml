### YamlMime:QSharpType
uid: microsoft.quantum.canon.decomposeintotimestepsca
name: DecomposeIntoTimeStepsCA
type: function
namespace: Microsoft.Quantum.Canon
summary: >2
   Returns an operation implementing the Trotter–Suzuki integrator for
   a given operation.
syntax: "function DecomposeIntoTimeStepsCA (nSteps : Int, op : ((Int, Double, 'T) => () : Adjoint, Controlled), trotterOrder : Int) : ((Double, 'T) => () : Adjoint, Controlled)"
input:
  content: "(nSteps : Int, op : ((Int, Double, 'T) => () : Adjoint, Controlled), trotterOrder : Int)"
  types:
  - name: nSteps
    summary: ' The number of operations to be decomposed into time steps.'
    uid: Int
    isPrimitive: true
  - name: op
    summary: >2-
       An operation which accepts an index input (type `Int`) and a time
       input (type `Double`) for decomposition.
    isOperation: true
    input:
      types:
      - uid: Int
        isPrimitive: true
      - uid: Double
        isPrimitive: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - uid: ()
        isPrimitive: true
    functors: &o0
    - Adjoint
    - Controlled
  - name: trotterOrder
    summary: >2
       Selects the order of the Trotter–Suzuki integrator to be used.
       Order 1 and 2 are currently supported.
    uid: Int
    isPrimitive: true
output:
  content: "((Double, 'T) => () : Adjoint, Controlled)"
  types:
  - summary: >2-
       Returns a unitary implementing the Trotter–Suzuki integrator, where
       the first parameter `Double` is the integration step size, and the
       second parameter is the target acted upon.
    isOperation: true
    input:
      types:
      - uid: Double
        isPrimitive: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - uid: ()
        isPrimitive: true
    functors: *o0
typeParameters:
- uid: "'T"
  summary: >2
     The type which each time step should act upon; typically, either
     `Qubit[]` or `Qubit`.
